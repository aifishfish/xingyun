<?xml version="1.0" encoding="UTF-8"?>

<sqls>
    <sql id="account.sr.showUsers" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
           SHOW USERS
        ]]>
    </sql>


    <sql id="ddl.sr.createTbl" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
           CREATE TABLE IF NOT EXISTS
                <#if schemaName?? && schemaName != "">${schemaName}.</#if>${tblName}
                (
                <#list cols! as item>
                    `${item.colName}`
                    <#if item.len?? && item.len!= "" && item.colType??
                       && (item.colType == "BIGINT" || item.colType == "DECIMAL" || item.colType == "CHAR"
                           || item.colType == "VARCHAR" || item.colType == "ARRAY") >
                         ${item.colType}(${item.len})
                         <#else>
                         ${item.colType!"VARCHAR"}
                    </#if>
                    ${item.keyType!}
                    ${item.notNull!}
                    <#if item.defaultVal?? && item.defaultVal != "">
                        DEFAULT  '${item.defaultVal!}'
                    </#if>
                        COMMENT  "${item.comment!}"
                        <#if item_has_next>,</#if>
                </#list>
                )ENGINE=OLAP

                <#if tblDataType?? && tblDataType == '0'>
                      DUPLICATE KEY(${keyDesc})
                </#if>
                <#if tblDataType?? && tblDataType == '1'>
                      AGGREGATE KEY(${keyDesc})
                </#if>
                <#if tblDataType?? && tblDataType == '2'>
                      UNIQUE KEY(${keyDesc})
                </#if>
                <#if tblDataType?? && tblDataType == '3'>
                      PRIMARY KEY(${keyDesc})
                </#if>
                COMMENT  "${comment!}"
                <#if partition_partitionMode?? && partition_partitionMode?string == "dominant">
                    <#if partition_partitionDesc?? && partition_partitionDesc?string == "LESS_THAN" >
                         PARTITION BY RANGE (${partition_partitionCols})(
                                <#list partition_partitionLessThanParms! as item>
                                   PARTITION ${item.partitionName} VALUES LESS THAN (${item.vals})
                                </#list>
                                )
                    </#if>
                    <#if partition_partitionDesc?? && partition_partitionDesc?string == "Fixed_Range" >
                         PARTITION BY RANGE (${partition_partitionCols})(
                                <#list partition_partitionFixedRangeParms! as item>
                                    PARTITION ${item.partitionName}  VALUES [(${item.lowerVals}), (${item.upperVals}))
                                </#list>
                                )
                    </#if>
                    <#if partition_partitionDesc?? && partition_partitionDesc?string == "BATCH" >
                        PARTITION BY RANGE (${partition_partitionCols})(
                        START (${partition_partitionBatchParm_start})
                        END (${partition_partitionBatchParm_end})
                        EVERY (INTERVAL ${partition_partitionBatchParm_interval} ${partition_partitionBatchParm_intervalNType})
                        )
                    </#if>
                </#if>
                <#if partition_partitionMode?? && partition_partitionMode?string == "recessive">
                    <#if partition_partitionExpressionParm_partitionFuncType?? && partition_partitionExpressionParm_partitionFuncType == "date_trunc">
                        PARTITION BY date_trunc(${partition_partitionExpressionParm_partitionTimeUnit},${partition_partitionCols})
                   </#if>
                    <#if partition_partitionExpressionParm_partitionFuncType?? && partition_partitionExpressionParm_partitionFuncType == "time_slice">
                        PARTITION BY time_slice(${partition_partitionCols} ,INTERVAL ${partition_partitionExpressionParm_partitionGranularity} ${partition_partitionExpressionParm_partitionTimeUnit})
                    </#if>
                </#if>
                <#if distributedCols??>
                    DISTRIBUTED BY HASH(${distributedCols})
                    <#if buckets??>
                        BUCKETS ${buckets}
                    </#if>
                </#if>
                <#if orderKeys??>
                    ORDER BY (
                    <#list orderKeys! as item>
                        ${item}
                    </#list>
                    )
                </#if>
                <#if properties??>
                    PROPERTIES (
                    <#list properties?keys as key>
                        "${key}" = "${properties[key]}"
                    </#list>
                    )
                </#if>

      ]]>
    </sql>

    <sql id="ddl.sr.createExternalTbl" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
               CREATE EXTERNAL TABLE
                 <#if schemaName?? && schemaName != "">${schemaName}.</#if>${tblName}
                (
               <#list cols! as item>
                    `${item.colName}`
                    <#if item.len?? && item.len!= "" && item.colType?? >
                         ${item.colType}(${item.len})
                         <#else>
                         ${item.colType}
                    </#if>
                    ${item.notNull!}
                    <#if item_has_next>,</#if>
                </#list>
                )
                ENGINE =  ${tblEngine}
                PROPERTIES
                (
                    <#list properties?keys as key>
                        "${key}" = "${properties[key]}"
                    </#list>
                )
        ]]>
    </sql>

    <sql id="ddl.sr.showResources" sqlType="SQL" tempateType="simple">
        <![CDATA[
           SHOW RESOURCES
        ]]>
    </sql>

    <sql id="ddl.sr.addColumns" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
          ALTER TABLE
           <#if schemaName?? && schemaName != "">
                ${schemaName}.
           </#if>${table}
           ADD COLUMN (
           <#list cols! as item>
                    `${item.colName}`
                    <#if item.len?? && item.len!= "" && item.colType??
                       && (item.colType == "BIGINT" || item.colType == "DECIMAL" || item.colType == "CHAR"
                           || item.colType == "VARCHAR" || item.colType == "ARRAY") >
                         ${item.colType}(${item.len})
                         <#else>
                         ${item.colType!"VARCHAR"}
                    </#if>
                    ${item.keyType!}
                    ${item.notNull!}
                    <#if item.defaultVal?? && item.defaultVal != "">
                        DEFAULT  '${item.defaultVal!}'
                    </#if>
                        COMMENT  "${item.comment!}"
                        <#if item_has_next>,</#if>
           </#list>
          )
        ]]>
    </sql>

    <sql id="aux.sr.desc" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
            DESC ${(catalogName)!"default_catalog"}.${dbName}.${tableName}
        ]]>
    </sql>

    <sql id="ops.sr.queryAllColumns" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
          SHOW FULL COLUMNS FROM ${(catalogName)!"default_catalog"}.${dbName}.${tableName}
        ]]>
    </sql>

    <sql id="dml.sr.getSchemaList" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
           SHOW DATABASES FROM ${(catalogName)!"default_catalog"}
         ]]>
    </sql>

    <sql id="dml.sr.getPartitionsList" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
           SHOW PARTITIONS FROM ${schema}.${tbl}
         ]]>
    </sql>

    <sql id="dml.sr.exsitSchema" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
          show databases from ${(catalogName)!"default_catalog"} like '${dbName}'
        ]]>
    </sql>

    <sql id="dml.sr.execQuery" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
            select t.* from (${sql}) as t limit ${maxVal}
        ]]>
    </sql>

    <sql id="task.sr.sync.insert.async" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
            SUBMIT /*+set_var(query_timeout=100000)*/  TASK ${taskName}
            AS
            INSERT ${(insertType)!"OVERWRITE"} ${(sinkCatalog)!"default_catalog"}.${sinkDb}.${sinkTbl}
            WITH LABEL ${label}
            (
             ${sinkCols}
            )
            SELECT  ${srcCols} FROM ${(srcCatalog)!"default_catalog"}.${srcDb}.${srcTbl}
        ]]>
    </sql>

    <sql id="task.sr.sync.insert.async.result" sqlType="SQL" tempateType="freeMarker">
        <![CDATA[
           SELECT * FROM information_schema.task_runs WHERE task_name = '${taskName}'
        ]]>
    </sql>




</sqls>
