/*
 * 星云 SpringDoc API
 * 星云 SpringDoc Application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.cloudcharts.xingyun.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cn.cloudcharts.xingyun.client.JSON;

/**
 * PageInfoObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-26T11:49:41.855+08:00[Asia/Shanghai]")
public class PageInfoObject {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Long total;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private List<Object> _list;

  public static final String SERIALIZED_NAME_PAGE_NUM = "pageNum";
  @SerializedName(SERIALIZED_NAME_PAGE_NUM)
  private Integer pageNum;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_START_ROW = "startRow";
  @SerializedName(SERIALIZED_NAME_START_ROW)
  private Long startRow;

  public static final String SERIALIZED_NAME_END_ROW = "endRow";
  @SerializedName(SERIALIZED_NAME_END_ROW)
  private Long endRow;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_PRE_PAGE = "prePage";
  @SerializedName(SERIALIZED_NAME_PRE_PAGE)
  private Integer prePage;

  public static final String SERIALIZED_NAME_NEXT_PAGE = "nextPage";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private Integer nextPage;

  public static final String SERIALIZED_NAME_IS_FIRST_PAGE = "isFirstPage";
  @SerializedName(SERIALIZED_NAME_IS_FIRST_PAGE)
  private Boolean isFirstPage;

  public static final String SERIALIZED_NAME_IS_LAST_PAGE = "isLastPage";
  @SerializedName(SERIALIZED_NAME_IS_LAST_PAGE)
  private Boolean isLastPage;

  public static final String SERIALIZED_NAME_HAS_PREVIOUS_PAGE = "hasPreviousPage";
  @SerializedName(SERIALIZED_NAME_HAS_PREVIOUS_PAGE)
  private Boolean hasPreviousPage;

  public static final String SERIALIZED_NAME_HAS_NEXT_PAGE = "hasNextPage";
  @SerializedName(SERIALIZED_NAME_HAS_NEXT_PAGE)
  private Boolean hasNextPage;

  public static final String SERIALIZED_NAME_NAVIGATE_PAGES = "navigatePages";
  @SerializedName(SERIALIZED_NAME_NAVIGATE_PAGES)
  private Integer navigatePages;

  public static final String SERIALIZED_NAME_NAVIGATEPAGE_NUMS = "navigatepageNums";
  @SerializedName(SERIALIZED_NAME_NAVIGATEPAGE_NUMS)
  private List<Integer> navigatepageNums;

  public static final String SERIALIZED_NAME_NAVIGATE_FIRST_PAGE = "navigateFirstPage";
  @SerializedName(SERIALIZED_NAME_NAVIGATE_FIRST_PAGE)
  private Integer navigateFirstPage;

  public static final String SERIALIZED_NAME_NAVIGATE_LAST_PAGE = "navigateLastPage";
  @SerializedName(SERIALIZED_NAME_NAVIGATE_LAST_PAGE)
  private Integer navigateLastPage;

  public PageInfoObject() {
  }

  public PageInfoObject total(Long total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Long getTotal() {
    return total;
  }


  public void setTotal(Long total) {
    this.total = total;
  }


  public PageInfoObject _list(List<Object> _list) {
    
    this._list = _list;
    return this;
  }

  public PageInfoObject addListItem(Object _listItem) {
    if (this._list == null) {
      this._list = new ArrayList<>();
    }
    this._list.add(_listItem);
    return this;
  }

   /**
   * Get _list
   * @return _list
  **/
  @javax.annotation.Nullable
  public List<Object> getList() {
    return _list;
  }


  public void setList(List<Object> _list) {
    this._list = _list;
  }


  public PageInfoObject pageNum(Integer pageNum) {
    
    this.pageNum = pageNum;
    return this;
  }

   /**
   * Get pageNum
   * @return pageNum
  **/
  @javax.annotation.Nullable
  public Integer getPageNum() {
    return pageNum;
  }


  public void setPageNum(Integer pageNum) {
    this.pageNum = pageNum;
  }


  public PageInfoObject pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PageInfoObject size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public PageInfoObject startRow(Long startRow) {
    
    this.startRow = startRow;
    return this;
  }

   /**
   * Get startRow
   * @return startRow
  **/
  @javax.annotation.Nullable
  public Long getStartRow() {
    return startRow;
  }


  public void setStartRow(Long startRow) {
    this.startRow = startRow;
  }


  public PageInfoObject endRow(Long endRow) {
    
    this.endRow = endRow;
    return this;
  }

   /**
   * Get endRow
   * @return endRow
  **/
  @javax.annotation.Nullable
  public Long getEndRow() {
    return endRow;
  }


  public void setEndRow(Long endRow) {
    this.endRow = endRow;
  }


  public PageInfoObject pages(Integer pages) {
    
    this.pages = pages;
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable
  public Integer getPages() {
    return pages;
  }


  public void setPages(Integer pages) {
    this.pages = pages;
  }


  public PageInfoObject prePage(Integer prePage) {
    
    this.prePage = prePage;
    return this;
  }

   /**
   * Get prePage
   * @return prePage
  **/
  @javax.annotation.Nullable
  public Integer getPrePage() {
    return prePage;
  }


  public void setPrePage(Integer prePage) {
    this.prePage = prePage;
  }


  public PageInfoObject nextPage(Integer nextPage) {
    
    this.nextPage = nextPage;
    return this;
  }

   /**
   * Get nextPage
   * @return nextPage
  **/
  @javax.annotation.Nullable
  public Integer getNextPage() {
    return nextPage;
  }


  public void setNextPage(Integer nextPage) {
    this.nextPage = nextPage;
  }


  public PageInfoObject isFirstPage(Boolean isFirstPage) {
    
    this.isFirstPage = isFirstPage;
    return this;
  }

   /**
   * Get isFirstPage
   * @return isFirstPage
  **/
  @javax.annotation.Nullable
  public Boolean getIsFirstPage() {
    return isFirstPage;
  }


  public void setIsFirstPage(Boolean isFirstPage) {
    this.isFirstPage = isFirstPage;
  }


  public PageInfoObject isLastPage(Boolean isLastPage) {
    
    this.isLastPage = isLastPage;
    return this;
  }

   /**
   * Get isLastPage
   * @return isLastPage
  **/
  @javax.annotation.Nullable
  public Boolean getIsLastPage() {
    return isLastPage;
  }


  public void setIsLastPage(Boolean isLastPage) {
    this.isLastPage = isLastPage;
  }


  public PageInfoObject hasPreviousPage(Boolean hasPreviousPage) {
    
    this.hasPreviousPage = hasPreviousPage;
    return this;
  }

   /**
   * Get hasPreviousPage
   * @return hasPreviousPage
  **/
  @javax.annotation.Nullable
  public Boolean getHasPreviousPage() {
    return hasPreviousPage;
  }


  public void setHasPreviousPage(Boolean hasPreviousPage) {
    this.hasPreviousPage = hasPreviousPage;
  }


  public PageInfoObject hasNextPage(Boolean hasNextPage) {
    
    this.hasNextPage = hasNextPage;
    return this;
  }

   /**
   * Get hasNextPage
   * @return hasNextPage
  **/
  @javax.annotation.Nullable
  public Boolean getHasNextPage() {
    return hasNextPage;
  }


  public void setHasNextPage(Boolean hasNextPage) {
    this.hasNextPage = hasNextPage;
  }


  public PageInfoObject navigatePages(Integer navigatePages) {
    
    this.navigatePages = navigatePages;
    return this;
  }

   /**
   * Get navigatePages
   * @return navigatePages
  **/
  @javax.annotation.Nullable
  public Integer getNavigatePages() {
    return navigatePages;
  }


  public void setNavigatePages(Integer navigatePages) {
    this.navigatePages = navigatePages;
  }


  public PageInfoObject navigatepageNums(List<Integer> navigatepageNums) {
    
    this.navigatepageNums = navigatepageNums;
    return this;
  }

  public PageInfoObject addNavigatepageNumsItem(Integer navigatepageNumsItem) {
    if (this.navigatepageNums == null) {
      this.navigatepageNums = new ArrayList<>();
    }
    this.navigatepageNums.add(navigatepageNumsItem);
    return this;
  }

   /**
   * Get navigatepageNums
   * @return navigatepageNums
  **/
  @javax.annotation.Nullable
  public List<Integer> getNavigatepageNums() {
    return navigatepageNums;
  }


  public void setNavigatepageNums(List<Integer> navigatepageNums) {
    this.navigatepageNums = navigatepageNums;
  }


  public PageInfoObject navigateFirstPage(Integer navigateFirstPage) {
    
    this.navigateFirstPage = navigateFirstPage;
    return this;
  }

   /**
   * Get navigateFirstPage
   * @return navigateFirstPage
  **/
  @javax.annotation.Nullable
  public Integer getNavigateFirstPage() {
    return navigateFirstPage;
  }


  public void setNavigateFirstPage(Integer navigateFirstPage) {
    this.navigateFirstPage = navigateFirstPage;
  }


  public PageInfoObject navigateLastPage(Integer navigateLastPage) {
    
    this.navigateLastPage = navigateLastPage;
    return this;
  }

   /**
   * Get navigateLastPage
   * @return navigateLastPage
  **/
  @javax.annotation.Nullable
  public Integer getNavigateLastPage() {
    return navigateLastPage;
  }


  public void setNavigateLastPage(Integer navigateLastPage) {
    this.navigateLastPage = navigateLastPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageInfoObject pageInfoObject = (PageInfoObject) o;
    return Objects.equals(this.total, pageInfoObject.total) &&
        Objects.equals(this._list, pageInfoObject._list) &&
        Objects.equals(this.pageNum, pageInfoObject.pageNum) &&
        Objects.equals(this.pageSize, pageInfoObject.pageSize) &&
        Objects.equals(this.size, pageInfoObject.size) &&
        Objects.equals(this.startRow, pageInfoObject.startRow) &&
        Objects.equals(this.endRow, pageInfoObject.endRow) &&
        Objects.equals(this.pages, pageInfoObject.pages) &&
        Objects.equals(this.prePage, pageInfoObject.prePage) &&
        Objects.equals(this.nextPage, pageInfoObject.nextPage) &&
        Objects.equals(this.isFirstPage, pageInfoObject.isFirstPage) &&
        Objects.equals(this.isLastPage, pageInfoObject.isLastPage) &&
        Objects.equals(this.hasPreviousPage, pageInfoObject.hasPreviousPage) &&
        Objects.equals(this.hasNextPage, pageInfoObject.hasNextPage) &&
        Objects.equals(this.navigatePages, pageInfoObject.navigatePages) &&
        Objects.equals(this.navigatepageNums, pageInfoObject.navigatepageNums) &&
        Objects.equals(this.navigateFirstPage, pageInfoObject.navigateFirstPage) &&
        Objects.equals(this.navigateLastPage, pageInfoObject.navigateLastPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, _list, pageNum, pageSize, size, startRow, endRow, pages, prePage, nextPage, isFirstPage, isLastPage, hasPreviousPage, hasNextPage, navigatePages, navigatepageNums, navigateFirstPage, navigateLastPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageInfoObject {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    _list: ").append(toIndentedString(_list)).append("\n");
    sb.append("    pageNum: ").append(toIndentedString(pageNum)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    startRow: ").append(toIndentedString(startRow)).append("\n");
    sb.append("    endRow: ").append(toIndentedString(endRow)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    prePage: ").append(toIndentedString(prePage)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    isFirstPage: ").append(toIndentedString(isFirstPage)).append("\n");
    sb.append("    isLastPage: ").append(toIndentedString(isLastPage)).append("\n");
    sb.append("    hasPreviousPage: ").append(toIndentedString(hasPreviousPage)).append("\n");
    sb.append("    hasNextPage: ").append(toIndentedString(hasNextPage)).append("\n");
    sb.append("    navigatePages: ").append(toIndentedString(navigatePages)).append("\n");
    sb.append("    navigatepageNums: ").append(toIndentedString(navigatepageNums)).append("\n");
    sb.append("    navigateFirstPage: ").append(toIndentedString(navigateFirstPage)).append("\n");
    sb.append("    navigateLastPage: ").append(toIndentedString(navigateLastPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total");
    openapiFields.add("list");
    openapiFields.add("pageNum");
    openapiFields.add("pageSize");
    openapiFields.add("size");
    openapiFields.add("startRow");
    openapiFields.add("endRow");
    openapiFields.add("pages");
    openapiFields.add("prePage");
    openapiFields.add("nextPage");
    openapiFields.add("isFirstPage");
    openapiFields.add("isLastPage");
    openapiFields.add("hasPreviousPage");
    openapiFields.add("hasNextPage");
    openapiFields.add("navigatePages");
    openapiFields.add("navigatepageNums");
    openapiFields.add("navigateFirstPage");
    openapiFields.add("navigateLastPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PageInfoObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PageInfoObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageInfoObject is not found in the empty JSON string", PageInfoObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PageInfoObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageInfoObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("list") != null && !jsonObj.get("list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `list` to be an array in the JSON string but got `%s`", jsonObj.get("list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("navigatepageNums") != null && !jsonObj.get("navigatepageNums").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `navigatepageNums` to be an array in the JSON string but got `%s`", jsonObj.get("navigatepageNums").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageInfoObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageInfoObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageInfoObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageInfoObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PageInfoObject>() {
           @Override
           public void write(JsonWriter out, PageInfoObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageInfoObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PageInfoObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PageInfoObject
  * @throws IOException if the JSON string is invalid with respect to PageInfoObject
  */
  public static PageInfoObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageInfoObject.class);
  }

 /**
  * Convert an instance of PageInfoObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

