/*
 * 星云 SpringDoc API
 * 星云 SpringDoc Application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cn.cloudcharts.xingyun.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cn.cloudcharts.xingyun.client.JSON;

/**
 * JdbcSelectResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-26T11:49:41.855+08:00[Asia/Shanghai]")
public class JdbcSelectResult {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Integer code;

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  private String msg;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_EXECUTE_TIME = "executeTime";
  @SerializedName(SERIALIZED_NAME_EXECUTE_TIME)
  private Long executeTime;

  public static final String SERIALIZED_NAME_EXCEPTION = "exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private String exception;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns;

  public static final String SERIALIZED_NAME_ROW_DATA = "rowData";
  @SerializedName(SERIALIZED_NAME_ROW_DATA)
  private List<Map<String, Object>> rowData;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_STATUS_LIST = "statusList";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST)
  private List<Object> statusList;

  public JdbcSelectResult() {
  }

  public JdbcSelectResult code(Integer code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public Integer getCode() {
    return code;
  }


  public void setCode(Integer code) {
    this.code = code;
  }


  public JdbcSelectResult msg(String msg) {
    
    this.msg = msg;
    return this;
  }

   /**
   * Get msg
   * @return msg
  **/
  @javax.annotation.Nullable
  public String getMsg() {
    return msg;
  }


  public void setMsg(String msg) {
    this.msg = msg;
  }


  public JdbcSelectResult data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public JdbcSelectResult timestamp(Long timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public JdbcSelectResult executeTime(Long executeTime) {
    
    this.executeTime = executeTime;
    return this;
  }

   /**
   * Get executeTime
   * @return executeTime
  **/
  @javax.annotation.Nullable
  public Long getExecuteTime() {
    return executeTime;
  }


  public void setExecuteTime(Long executeTime) {
    this.executeTime = executeTime;
  }


  public JdbcSelectResult exception(String exception) {
    
    this.exception = exception;
    return this;
  }

   /**
   * Get exception
   * @return exception
  **/
  @javax.annotation.Nullable
  public String getException() {
    return exception;
  }


  public void setException(String exception) {
    this.exception = exception;
  }


  public JdbcSelectResult action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public JdbcSelectResult columns(List<String> columns) {
    
    this.columns = columns;
    return this;
  }

  public JdbcSelectResult addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }


  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public JdbcSelectResult rowData(List<Map<String, Object>> rowData) {
    
    this.rowData = rowData;
    return this;
  }

  public JdbcSelectResult addRowDataItem(Map<String, Object> rowDataItem) {
    if (this.rowData == null) {
      this.rowData = new ArrayList<>();
    }
    this.rowData.add(rowDataItem);
    return this;
  }

   /**
   * Get rowData
   * @return rowData
  **/
  @javax.annotation.Nullable
  public List<Map<String, Object>> getRowData() {
    return rowData;
  }


  public void setRowData(List<Map<String, Object>> rowData) {
    this.rowData = rowData;
  }


  public JdbcSelectResult total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    this.total = total;
  }


  public JdbcSelectResult page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public JdbcSelectResult limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public JdbcSelectResult statusList(List<Object> statusList) {
    
    this.statusList = statusList;
    return this;
  }

  public JdbcSelectResult addStatusListItem(Object statusListItem) {
    if (this.statusList == null) {
      this.statusList = new ArrayList<>();
    }
    this.statusList.add(statusListItem);
    return this;
  }

   /**
   * Get statusList
   * @return statusList
  **/
  @javax.annotation.Nullable
  public List<Object> getStatusList() {
    return statusList;
  }


  public void setStatusList(List<Object> statusList) {
    this.statusList = statusList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JdbcSelectResult jdbcSelectResult = (JdbcSelectResult) o;
    return Objects.equals(this.code, jdbcSelectResult.code) &&
        Objects.equals(this.msg, jdbcSelectResult.msg) &&
        Objects.equals(this.data, jdbcSelectResult.data) &&
        Objects.equals(this.timestamp, jdbcSelectResult.timestamp) &&
        Objects.equals(this.executeTime, jdbcSelectResult.executeTime) &&
        Objects.equals(this.exception, jdbcSelectResult.exception) &&
        Objects.equals(this.action, jdbcSelectResult.action) &&
        Objects.equals(this.columns, jdbcSelectResult.columns) &&
        Objects.equals(this.rowData, jdbcSelectResult.rowData) &&
        Objects.equals(this.total, jdbcSelectResult.total) &&
        Objects.equals(this.page, jdbcSelectResult.page) &&
        Objects.equals(this.limit, jdbcSelectResult.limit) &&
        Objects.equals(this.statusList, jdbcSelectResult.statusList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, msg, data, timestamp, executeTime, exception, action, columns, rowData, total, page, limit, statusList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JdbcSelectResult {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    executeTime: ").append(toIndentedString(executeTime)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    rowData: ").append(toIndentedString(rowData)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    statusList: ").append(toIndentedString(statusList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("msg");
    openapiFields.add("data");
    openapiFields.add("timestamp");
    openapiFields.add("executeTime");
    openapiFields.add("exception");
    openapiFields.add("action");
    openapiFields.add("columns");
    openapiFields.add("rowData");
    openapiFields.add("total");
    openapiFields.add("page");
    openapiFields.add("limit");
    openapiFields.add("statusList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JdbcSelectResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JdbcSelectResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JdbcSelectResult is not found in the empty JSON string", JdbcSelectResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JdbcSelectResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JdbcSelectResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      if ((jsonObj.get("exception") != null && !jsonObj.get("exception").isJsonNull()) && !jsonObj.get("exception").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rowData") != null && !jsonObj.get("rowData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowData` to be an array in the JSON string but got `%s`", jsonObj.get("rowData").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusList") != null && !jsonObj.get("statusList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusList` to be an array in the JSON string but got `%s`", jsonObj.get("statusList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JdbcSelectResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JdbcSelectResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JdbcSelectResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JdbcSelectResult.class));

       return (TypeAdapter<T>) new TypeAdapter<JdbcSelectResult>() {
           @Override
           public void write(JsonWriter out, JdbcSelectResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JdbcSelectResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JdbcSelectResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JdbcSelectResult
  * @throws IOException if the JSON string is invalid with respect to JdbcSelectResult
  */
  public static JdbcSelectResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JdbcSelectResult.class);
  }

 /**
  * Convert an instance of JdbcSelectResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

